import asyncio
import telebot
from datetime import datetime
from loguru import logger
from .config import get_settings
from .llm import DeepSeekLLM
from .calendar import CalendarManager
from .users import UserManager

class CalendarBot:
    def __init__(self):
        self.settings = get_settings()
        self.bot = telebot.TeleBot(self.settings["telegram_token"])
        self.llm = DeepSeekLLM()
        self.calendar = CalendarManager()
        self.user_manager = UserManager()
        self.parsed_events = {}  # Store parsed events by message_id
        self._setup_handlers()

    def _format_datetime(self, iso_datetime: str) -> str:
        """Format ISO datetime to human readable format"""
        try:
            dt = datetime.fromisoformat(iso_datetime.replace('Z', '+00:00'))
            return dt.strftime("%d.%m.%Y %H:%M")
        except Exception as e:
            logger.error(f"Failed to format datetime: {str(e)}")
            return iso_datetime

    def _create_event_message(self, event: dict) -> str:
        """Create formatted event message"""
        parts = []
        
        if event.get("title"):
            parts.append(f"üìå {event['title']}")
            
        if event.get("start_time"):
            parts.append(f"üïí –ù–∞—á–∞–ª–æ: {self._format_datetime(event['start_time'])}")
            
        if event.get("end_time"):
            parts.append(f"üïí –ö–æ–Ω–µ—Ü: {self._format_datetime(event['end_time'])}")
            
        if event.get("location"):
            parts.append(f"üìç {event['location']}")
            
        if event.get("description"):
            parts.append(f"üìù {event['description']}")
            
        return "\n".join(parts)

    def _setup_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def handle_start(message):
            welcome_text = (
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–≤–æ–µ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é. "
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /caldav —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n"
                "/caldav username password url calendar_name\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "/caldav vvzvlad@fastmail.com password https://caldav.fastmail.com/dav/ TG\n\n"
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –æ —Å–æ–±—ã—Ç–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –ó–∞–≤—Ç—Ä–∞ –≤ 15:00 –≤—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º\n"
                "‚Ä¢ 25 –º–∞—Ä—Ç–∞ –≤ 11 —É—Ç—Ä–∞ –ª–µ–∫—Ü–∏—è –æ —è–ø–æ–Ω—Å–∫–æ–º —Å–∏–º–≤–æ–ª–∏–∑–º–µ\n"
                "‚Ä¢ –í—Å—Ç—Ä–µ—á–∞ –≤ –æ—Ñ–∏—Å–µ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00\n\n"
                "–Ø –ø–æ–π–º—É —Ç–µ–∫—Å—Ç –∏ –¥–æ–±–∞–≤–ª—é —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å."
            )
            self.bot.reply_to(message, welcome_text)

        @self.bot.message_handler(commands=['caldav'])
        def handle_caldav(message):
            try:
                # Check if user provided all required parameters
                params = message.text.split()
                if len(params) != 5:
                    self.bot.reply_to(
                        message,
                        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                        "/caldav username password url calendar_name\n\n"
                        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                        "/caldav user@fastmail.com strong_password https://caldav.fastmail.com/dav/ main_calendar"
                    )
                    return

                # Get parameters
                _, username, password, url, calendar_name = params

                # Show checking message
                self.bot.send_message(message.chat.id, "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é...")

                # Check calendar access
                success, error = self.calendar.check_calendar_access(url, username, password, calendar_name)
                if not success:
                    self.bot.send_message(message.chat.id, f"‚ùå {error}")
                    return

                # Save credentials
                success = self.user_manager.save_caldav_credentials(
                    message.from_user.id,
                    username,
                    password,
                    url,
                    calendar_name
                )

                if success:
                    self.bot.reply_to(
                        message,
                        "‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è."
                    )
                else:
                    self.bot.reply_to(
                        message,
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    )

            except Exception as e:
                logger.error(f"Error setting up CalDAV: {str(e)}")
                self.bot.reply_to(
                    message,
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )

        @self.bot.message_handler(func=lambda message: True)
        def handle_message(message):
            try:
                # Check if user has CalDAV credentials
                if not self.user_manager.has_caldav_credentials(message.from_user.id):
                    self.bot.reply_to(
                        message,
                        "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é. "
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /caldav"
                    )
                    return

                logger.info(f"Received message from {message.from_user.id}: {message.text}")
                self.bot.send_chat_action(message.chat.id, 'typing')
                event = asyncio.run(self.llm.parse_calendar_event(message.text))
                
                if not event:
                    self.bot.reply_to(
                        message,
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    )
                    return
                
                if not event["result"]:
                    self.bot.reply_to(
                        message,
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ: {event['comment']}"
                    )
                    return
                
                # Create inline keyboard
                keyboard = telebot.types.InlineKeyboardMarkup()
                keyboard.row(
                    telebot.types.InlineKeyboardButton("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="add")
                )
                
                # Send event preview with buttons
                preview_message = self.bot.reply_to(
                    message,
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏:\n\n{self._create_event_message(event)}",
                    reply_markup=keyboard
                )
                
                # Store parsed event in memory
                self.parsed_events[preview_message.message_id] = event
                
            except Exception as e:
                logger.error(f"Error processing message: {str(e)}")
                self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_callback(call):
            try:
                action = call.data
                
                if action == 'add':
                    # Get parsed event from memory
                    event = self.parsed_events.get(call.message.message_id)
                    if not event:
                        self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏")
                        return
                    
                    # Add event to calendar
                    success, error = self.calendar.add_event(
                        user_id=call.from_user.id,
                        title=event["title"],
                        start_time=event["start_time"],
                        end_time=event["end_time"],
                        description=event["description"],
                        location=event["location"]
                    )
                    
                    if success:
                        self.bot.answer_callback_query(call.id, "‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
                        # Update button text
                        keyboard = telebot.types.InlineKeyboardMarkup()
                        keyboard.row(
                            telebot.types.InlineKeyboardButton("‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ", callback_data="added")
                        )
                        self.bot.edit_message_reply_markup(
                            chat_id=call.message.chat.id,
                            message_id=call.message.message_id,
                            reply_markup=keyboard
                        )
                        # Clean up
                        del self.parsed_events[call.message.message_id]
                    else:
                        self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
                        self.bot.reply_to(call.message, f"‚ùå {error}")
                        
                elif action == 'added':
                    self.bot.answer_callback_query(call.id, "–≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
                    
            except Exception as e:
                logger.error(f"Error handling callback: {str(e)}")
                self.bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    def run(self):
        logger.info("Starting bot...")
        self.bot.infinity_polling()
