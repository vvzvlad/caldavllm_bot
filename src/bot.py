import asyncio
from datetime import datetime
from loguru import logger
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from .config import get_settings
from .llm import DeepSeekLLM
from .calendar import CalendarManager
from .users import UserManager

class CalendarBot:
    def __init__(self):
        self.settings = get_settings()
        self.bot = Bot(token=self.settings["telegram_token"])
        self.dp = Dispatcher()
        self.llm = DeepSeekLLM()
        self.calendar = CalendarManager()
        self.user_manager = UserManager()
        self.parsed_events = {}
        self._setup_handlers()

    def _format_datetime(self, iso_datetime: str) -> str:
        """Format ISO datetime to human readable format"""
        try:
            dt = datetime.fromisoformat(iso_datetime.replace('Z', '+00:00'))
            return dt.strftime("%d.%m.%Y %H:%M")
        except Exception as e:
            logger.error(f"Failed to format datetime: {str(e)}")
            return iso_datetime

    def _format_number(self, number: int) -> str:
        """Format number to human readable format with k suffix"""
        if number >= 1000: return f"{number // 1000}–∫"
        return str(number)

    def _create_event_message(self, event: dict) -> str:
        """Create formatted event message"""
        parts = []
        
        if event.get("title"): parts.append(f"üìå {event['title']}")
        if event.get("start_time"): parts.append(f"üïí –ù–∞—á–∞–ª–æ: {self._format_datetime(event['start_time'])}")
        if event.get("end_time"): parts.append(f"üïí –ö–æ–Ω–µ—Ü: {self._format_datetime(event['end_time'])}")
        if event.get("location"): parts.append(f"üìç {event['location']}")
        if event.get("description"): parts.append(f"üìù {event['description']}")
        return "\n".join(parts)

    async def _send_typing_status(self, chat_id: int):
        """Send typing status every 4 seconds until cancelled"""
        while True:
            try:
                await self.bot.send_chat_action(chat_id=chat_id, action="typing")
                await asyncio.sleep(4)  # Telegram typing status lasts 5 seconds
            except Exception as e:
                logger.error(f"Error sending typing status: {str(e)}")
                break

    async def _process_message(self, message: types.Message):
        try:
            if not self.user_manager.has_caldav_credentials(message.from_user.id):
                await message.reply( "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /caldav, /google –∏–ª–∏ /fastmail" )
                return

            if not self.user_manager.check_token_limit(message.from_user.id):
                await message.reply(
                    f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ ({self.user_manager.daily_token_limit}). "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞."
                )
                return

            logger.info(f"Received message from {message.from_user.id}: {message.text}")

            llm = DeepSeekLLM()
            
            typing_task = asyncio.create_task(self._send_typing_status(message.chat.id))
            try:
                event = await llm.parse_calendar_event(message.text)
            finally:
                typing_task.cancel()
                try:
                    await typing_task
                except asyncio.CancelledError:
                    pass

            if not event:
                await message.reply( "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." )
                return
            
            tokens_used = event.get("tokens_used", 0) if isinstance(event, dict) else 0
            self.user_manager.update_user_stats(message.from_user.id, tokens_used)
            self.user_manager.add_tokens_used(message.from_user.id, tokens_used)
            
            if not event["result"]:
                error_text = event.get("comment", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                await message.reply(  f"‚ùå {error_text}" )
                return
            
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="add")]
            ])
            
            preview_message = await message.reply(
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏:\n\n{self._create_event_message(event)}",
                reply_markup=keyboard
            )
            
            self.parsed_events[preview_message.message_id] = event
            
        except Exception as e:
            logger.error(f"Error processing message: {str(e)}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    async def _process_callback(self, callback_query: types.CallbackQuery):
        try:
            action = callback_query.data
            
            if action == 'add':
                event = self.parsed_events.get(callback_query.message.message_id)
                if not event:
                    await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏")
                    return
                
                success, error = await self.calendar.add_event(
                    user_id=callback_query.from_user.id,
                    title=event["title"],
                    start_time=event["start_time"],
                    end_time=event["end_time"],
                    description=event["description"],
                    location=event["location"]
                )
                
                if success:
                    await callback_query.answer("‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
                    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ", callback_data="added")]
                    ])
                    await callback_query.message.edit_reply_markup(reply_markup=keyboard)
                    del self.parsed_events[callback_query.message.message_id]
                else:
                    await callback_query.answer("‚ùå –û—à–∏–±–∫–∞")
                    await callback_query.message.reply(f"‚ùå {error}")
                    
            elif action == 'added':
                await callback_query.answer("–≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
                
        except Exception as e:
            logger.error(f"Error handling callback: {str(e)}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    def _setup_handlers(self):
        @self.dp.message(Command("start"))
        async def handle_start(message: types.Message):
            welcome_text = (
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.\n\n"
                "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:\n\n"
                "üìß –î–ª—è Google Calendar:\n"
                "/google account password [calendar] - –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Google Calendar\n\n"
                "üìß –î–ª—è FastMail:\n"
                "/fastmail account password [calendar] - –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ FastMail\n\n"
                "üîß –î–ª—è –¥—Ä—É–≥–∏—Ö CalDAV –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π:\n"
                "/caldav username password url calendar_name\n\n"
                "–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –æ —Å–æ–±—ã—Ç–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –ó–∞–≤—Ç—Ä–∞ –≤ 15:00 –≤—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º\n"
                "‚Ä¢ 25 –º–∞—Ä—Ç–∞ –≤ 11 —É—Ç—Ä–∞ –ª–µ–∫—Ü–∏—è –æ —è–ø–æ–Ω—Å–∫–æ–º —Å–∏–º–≤–æ–ª–∏–∑–º–µ\n"
                "‚Ä¢ –í—Å—Ç—Ä–µ—á–∞ –≤ –æ—Ñ–∏—Å–µ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00\n\n"
                "–Ø –ø–æ–π–º—É —Ç–µ–∫—Å—Ç –∏ –¥–æ–±–∞–≤–ª—é —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å."
            )
            await message.reply(welcome_text)

        @self.dp.message(Command("google"))
        async def handle_google(message: types.Message):
            try:
                params = message.text.split()
                if len(params) < 3 or len(params) > 4:
                    await message.reply(
                        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                        "/google username password [calendar]\n\n"
                        "‚ùóÔ∏è username - –≤–∞—à –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ—è (–º–æ–∂–Ω–æ —Å @gmail.com, –º–æ–∂–Ω–æ –±–µ–∑)\n"
                        "‚ùóÔ∏è password ‚Äî –≤–∞—à –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:\n"
                        "1. –í–∫–ª—é—á–∏—Ç—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (2FA)\n"
                        "   ‚Ä¢ –ë–µ–∑ 2FA –ø–∞—Ä–æ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
                        "   ‚Ä¢ –û–±—ã—á–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –ø–æ–¥–æ–π–¥–µ—Ç\n\n"
                        "2. –°–æ–∑–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n"
                        "   ‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://myaccount.google.com/apppasswords –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ Security->2-Step Verification->App passwords\n"
                        "   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä 'Calendar Bot')\n"
                        "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –≤ –∫–æ–º–∞–Ω–¥–µ –≤—ã—à–µ\n\n"
                        "‚ùóÔ∏è calendar - –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
                        "   ‚Ä¢ –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
                        disable_web_page_preview=True
                    )
                    return

                _, username, password, *calendar_params = params
                if not username.endswith("@gmail.com"):
                    username = f"{username}@gmail.com"

                url = f"https://www.google.com/calendar/dav/{username}/events"
                calendar_name = calendar_params[0] if calendar_params else username

                status_message = await message.reply("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Calendar...")

                success, error = await self.calendar.check_calendar_access(url, username, password, calendar_name)
                if not success:
                    await status_message.edit_text(f"‚ùå {error}")
                    return

                success = self.user_manager.save_caldav_credentials(
                    message.from_user.id,
                    username,
                    password,
                    url,
                    calendar_name
                )

                if success:
                    await status_message.edit_text("‚úÖ Google Calendar –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è.")
                else:
                    await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

            except Exception as e:
                logger.error(f"Error setting up Google Calendar: {str(e)}")
                await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        @self.dp.message(Command("fastmail"))
        async def handle_fastmail(message: types.Message):
            try:
                params = message.text.split()
                if len(params) < 3 or len(params) > 4:
                    await message.reply(
                        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                        "/fastmail username password [calendar]\n\n"
                        "‚ùóÔ∏è username - –≤–∞—à –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ—è (–º–æ–∂–Ω–æ —Å @fastmail.com, –º–æ–∂–Ω–æ –±–µ–∑)\n"
                        "‚ùóÔ∏è password ‚Äî –≤–∞—à –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:\n"
                        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://app.fastmail.com/settings/security/apps\n"
                        "2. –ù–∞–∂–º–∏—Ç–µ 'New App Password'\n"
                        "3. –í—ã–±–µ—Ä–∏—Ç–µ 'Calendars (CalDAV)'(—Ç–∞–∫ –¥–æ—Å—Ç—É–ø —É –±–æ—Ç–∞ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é, –∞ –Ω–µ –∫–æ –≤—Å–µ–π –ø–æ—á—Ç–µ) –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä 'Calendar Bot'\n"
                        "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –≤ –∫–æ–º–∞–Ω–¥–µ –≤—ã—à–µ\n\n"
                        "‚ùóÔ∏è calendar - –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
                        "   ‚Ä¢ –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
                        disable_web_page_preview=True
                    )
                    return

                _, username, password, *calendar_params = params
                if not username.endswith("@fastmail.com"):
                    username = f"{username}@fastmail.com"

                # Get username without domain for default calendar name
                default_calendar = username.split('@')[0]
                calendar_name = calendar_params[0] if calendar_params else default_calendar

                url = "https://caldav.fastmail.com/dav/"

                status_message = await message.reply("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FastMail...")

                success, error = await self.calendar.check_calendar_access(url, username, password, calendar_name)
                if not success:
                    await status_message.edit_text(f"‚ùå {error}")
                    return

                success = self.user_manager.save_caldav_credentials(
                    message.from_user.id,
                    username,
                    password,
                    url,
                    calendar_name
                )

                if success:
                    await status_message.edit_text("‚úÖ FastMail –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è.")
                else:
                    await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

            except Exception as e:
                logger.error(f"Error setting up FastMail: {str(e)}")
                await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        @self.dp.message(Command("caldav"))
        async def handle_caldav(message: types.Message):
            try:
                params = message.text.split()
                if len(params) != 5:
                    await message.reply(
                        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n /caldav username password url calendar_name\n\n"
                        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n/caldav user@fastmail.com strong_password https://caldav.fastmail.com/dav/ main_calendar",
                        disable_web_page_preview=True
                    )
                    return

                _, username, password, url, calendar_name = params

                status_message = await message.reply("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é...")

                success, error = await self.calendar.check_calendar_access(url, username, password, calendar_name)
                if not success:
                    await status_message.edit_text(f"‚ùå {error}")
                    return

                success = self.user_manager.save_caldav_credentials(
                    message.from_user.id,
                    username,
                    password,
                    url,
                    calendar_name
                )

                if success:
                    await status_message.edit_text(
                        "‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è."
                    )
                else:
                    await status_message.edit_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    )

            except Exception as e:
                logger.error(f"Error setting up CalDAV: {str(e)}")
                await message.reply(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    disable_web_page_preview=True
                )

        @self.dp.message(Command("stats"))
        async def handle_stats(message: types.Message):
            stats = self.user_manager.get_user_stats(message.from_user.id)
            if not stats:
                await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
                return
                
            
            remaining_tokens = self.user_manager.get_remaining_tokens(message.from_user.id)
            
            stats_text = (
                "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {self._format_number(self.user_manager.daily_token_limit - remaining_tokens)} –∏–∑ –ª–∏–º–∏—Ç–∞ {self._format_number(self.user_manager.daily_token_limit)}\n"
                f"–í—ã —Å–¥–µ–ª–∞–ª–∏ {stats['requests_count']} –∑–∞–ø—Ä–æ—Å–æ–≤, –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤: {self._format_number(stats['total_tokens'])}, "
                f"–≤ —Å—Ä–µ–¥–Ω–µ–º {stats['total_tokens'] // max(1, stats['requests_count'])} —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å"
            )
            await message.reply(stats_text)

        @self.dp.message()
        async def handle_message(message: types.Message):
            # –°–æ–∑–¥–∞–µ–º —Ç–∞—Å–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            asyncio.create_task(self._process_message(message))

        @self.dp.callback_query()
        async def handle_callback(callback_query: types.CallbackQuery):
            # –°–æ–∑–¥–∞–µ–º —Ç–∞—Å–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–∞
            asyncio.create_task(self._process_callback(callback_query))

    async def _advertise_commands(self):
        """Register bot commands in Telegram"""
        commands = [
            types.BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
            types.BotCommand(command="google", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Calendar"),
            types.BotCommand(command="fastmail", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ FastMail"),
            types.BotCommand(command="caldav", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ CalDAV"),
            types.BotCommand(command="stats", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        ]
        await self.bot.set_my_commands(commands)

    async def start(self):
        logger.info("Starting bot...")
        try:
            await self._advertise_commands()
            await self.dp.start_polling(self.bot)
        finally:
            await self.bot.session.close()
