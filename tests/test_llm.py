# flake8: noqa
# pylint: disable=broad-exception-raised, raise-missing-from, too-many-arguments, redefined-outer-name, protected-access
# pylance: disable=reportMissingImports, reportMissingModuleSource, reportGeneralTypeIssues
# type: ignore

import pytest
from datetime import datetime, timedelta
from unittest.mock import patch
from src.llm import DeepSeekLLM
import os
from unittest.mock import MagicMock

def check_api_key():
    api_key = os.getenv("API_KEY")
    if not api_key:
        pytest.fail("API_KEY environment variable is not set. Please set it before running tests.")

@pytest.fixture(autouse=True)
def setup():
    check_api_key()

@pytest.fixture
def llm_instance():
    return DeepSeekLLM()


@pytest.mark.asyncio
async def test_datetime_mock():
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 20, 12, 0)
        llm = DeepSeekLLM()
        current_date = llm._return_datetime()
        assert current_date == datetime(2024, 3, 20, 12, 0)
        assert current_date != datetime(2024, 3, 20, 12, 1)


@pytest.mark.asyncio
async def test_generate_calendar():
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 20, 12, 0)
        
        llm = DeepSeekLLM()
        calendar = await llm._generate_calendar()
        expected_calendar = """20 March ‚Äî —Å—Ä–µ–¥–∞ (—Å–µ–≥–æ–¥–Ω—è)
21 March ‚Äî —ç—Ç–æ—Ç —á–µ—Ç–≤–µ—Ä–≥
22 March ‚Äî —ç—Ç–∞ –ø—è—Ç–Ω–∏—Ü–∞
23 March ‚Äî —ç—Ç–∞ —Å—É–±–±–æ—Ç–∞
24 March ‚Äî —ç—Ç–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
25 March ‚Äî —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
26 March ‚Äî —Å–ª–µ–¥—É—é—â–∏–π –≤—Ç–æ—Ä–Ω–∏–∫
27 March ‚Äî —Å–ª–µ–¥—É—é—â–∞—è —Å—Ä–µ–¥–∞
28 March ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —á–µ—Ç–≤–µ—Ä–≥
29 March ‚Äî —Å–ª–µ–¥—É—é—â–∞—è –ø—è—Ç–Ω–∏—Ü–∞
30 March ‚Äî —Å–ª–µ–¥—É—é—â–∞—è —Å—É–±–±–æ—Ç–∞
31 March ‚Äî —Å–ª–µ–¥—É—é—â–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
01 April ‚Äî —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
02 April ‚Äî —Å–ª–µ–¥—É—é—â–∏–π –≤—Ç–æ—Ä–Ω–∏–∫"""
        assert calendar == expected_calendar

@pytest.mark.asyncio
async def test_parse_calendar_event_today(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("–í—Å—Ç—Ä–µ—á–∞ —Å —Å–µ—Ä–≥–µ–µ–º —Å–µ–≥–æ–¥–Ω—è –≤ 15:00 –≤ –æ—Ñ–∏—Å–µ")
        
        assert result is not None
        assert "—Å–µ—Ä–≥–µ" in result["title"].lower()
        assert result["start_time"] == "2024-03-15T15:00:00"
        assert result["end_time"] == "2024-03-15T16:00:00"
        assert result["location"] == "–û—Ñ–∏—Å"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_tomorrow(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("–í—Å—Ç—Ä–µ—á–∞ —Å —Å–µ—Ä–≥–µ–µ–º –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –≤ –æ—Ñ–∏—Å–µ")
        
        assert result is not None
        assert "—Å–µ—Ä–≥–µ" in result["title"].lower()
        assert result["start_time"] == "2024-03-16T15:00:00"
        assert result["end_time"] == "2024-03-16T16:00:00"
        assert result["location"] == "–û—Ñ–∏—Å"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_specific_day(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("–í—Å—Ç—Ä–µ—á–∞ –≤ –æ—Ñ–∏—Å–µ —Å —Å–µ—Ä–≥–µ–µ–º 15 —á–∏—Å–ª–∞ –≤ 15:00")
        
        assert result is not None
        assert "—Å–µ—Ä–≥–µ" in result["title"].lower()
        assert result["start_time"] == "2024-03-15T15:00:00"
        assert result["end_time"] == "2024-03-15T16:00:00"
        assert result["location"] == "–û—Ñ–∏—Å"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_specific_date(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("–í—Å—Ç—Ä–µ—á–∞ —Å —Å–µ—Ä–≥–µ–µ–º 15 –º–∞—Ä—Ç–∞ –≤ 15:00 –≤ –æ—Ñ–∏—Å–µ")
        
        assert result is not None
        assert "—Å–µ—Ä–≥–µ" in result["title"].lower()
        assert result["start_time"] == "2024-03-15T15:00:00"
        assert result["end_time"] == "2024-03-15T16:00:00"
        assert result["location"] == "–û—Ñ–∏—Å"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_only_time(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("–í—Å—Ç—Ä–µ—á–∞ —Å —Å–µ—Ä–≥–µ–µ–º –≤ 15:00")
        
        assert result is not None
        assert "—Å–µ—Ä–≥–µ" in result["title"].lower()
        assert result["start_time"] == "2024-03-15T15:00:00"
        assert result["end_time"] == "2024-03-15T16:00:00"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_past_day(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 20, 12, 0)
        result = await llm_instance.parse_calendar_event("–í—Å—Ç—Ä–µ—á–∞ —Å —Å–µ—Ä–≥–µ–µ–º 15-–≥–æ –≤ 15:00 –≤ –æ—Ñ–∏—Å–µ")
        
        assert result is not None
        assert "—Å–µ—Ä–≥–µ" in result["title"].lower()
        assert result["start_time"] == "2024-04-15T15:00:00"
        assert result["end_time"] == "2024-04-15T16:00:00"
        assert result["location"] == "–û—Ñ–∏—Å"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_past_date(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 20, 12, 0)
        result = await llm_instance.parse_calendar_event("–í—Å—Ç—Ä–µ—á–∞ —Å —Å–µ—Ä–≥–µ–µ–º 15 –º–∞—Ä—Ç–∞ –≤ 15:00 –≤ –æ—Ñ–∏—Å–µ")
        
        assert result is not None
        assert "—Å–µ—Ä–≥–µ" in result["title"].lower()
        assert result["start_time"] == "2025-03-15T15:00:00"
        assert result["end_time"] == "2025-03-15T16:00:00"
        assert result["location"] == "–û—Ñ–∏—Å"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_insufficient_info(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("–í—Å—Ç—Ä–µ—á–∞ —Å —Å–µ—Ä–≥–µ–µ–º –≤ —Å–µ–Ω—Ç—è–±—Ä–µ")
        
        assert result is not None
        assert result["result"] is False
        assert result["comment"] is not None
        assert "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" in result["comment"]

@pytest.mark.asyncio
async def test_parse_calendar_event_insufficient_info_with_location(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("–í—Å—Ç—Ä–µ—á–∞ —Å —Å–µ—Ä–≥–µ–µ–º –≤ —Å–µ–Ω—Ç—è–±—Ä–µ –≤ –æ—Ñ–∏—Å–µ")
        
        assert result is not None
        assert result["result"] is False
        assert result["comment"] is not None
        assert "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" in result["comment"]

@pytest.mark.asyncio
async def test_parse_calendar_event_doctor_appointment(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("""–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —ç—Ç–æ –î–û–ö–ë–û–¢ ü§ñ
–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º –≤ –æ–¥–Ω—É –∏–∑ –Ω–∞—à–∏—Ö –∫–ª–∏–Ω–∏–∫ DocDeti, DocMed, DocDent –ø–æ –∞–¥—Ä–µ—Å—É: 121471, –ú–æ—Å–∫–≤–∞ –≥, –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥ –ú–æ–∂–∞–π—Å–∫–∏–π, –ü–µ—Ç—Ä–∞ –ê–ª–µ–∫—Å–µ–µ–≤–∞ —É–ª, –¥–æ–º 14, –ø–æ–º–µ—â–µ–Ω–∏–µ 23–ù –Ω–∞ 24 –ú–∞—Ä—Ç–∞ 2025 –≥. –≤ 14:20
–í—Ä–∞—á: –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥ –ß–∏–∫–∞—Ç—É–µ–≤–∞ –î

–ö–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏: https://clck.ru/34v7dh
–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –∫–ª–∏–Ω–∏–∫–∏:

‚Ä¢    –ù–∞ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ https://vk.com/video-165966750_456239875?list=ln-EjMdQJo7jg345uu27Q
‚Ä¢    –ï—Å–ª–∏ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–µ—Ö–∞—Ç—å –Ω–∞ –º–∞—à–∏–Ω–µ, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –µ—ë –º–∞—Ä–∫—É, –Ω–æ–º–µ—Ä –∏ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤—ä–µ–∑–¥ –≤ –ñ–ö. –ë–µ–∑ –Ω–µ–≥–æ –Ω–∞ –ª–∏—á–Ω–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –≤–∞—Å –Ω–µ –ø—Ä–æ–ø—É—Å—Ç—è—Ç. –û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫ –º–æ–∂–Ω–æ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É 
+7 (495) 150 99 51 –∏–ª–∏ –≤ What's App https://wa.me/79855055776""")
        
        assert result is not None
        assert "–¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥" in result["title"].lower()
        assert result["start_time"] == "2025-03-24T14:20:00"
        assert result["end_time"] == "2025-03-24T15:20:00"
        assert "121471, –ú–æ—Å–∫–≤–∞ –≥" in result["location"]
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_beauty_salon(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 1, 1, 12, 0)
        result = await llm_instance.parse_calendar_event("""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í–ª–∞–¥! 
–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ ¬´The Kudri club¬ª. 

–î–∞—Ç–∞ 
06.01.2024 20:00:00 	
–ê–¥—Ä–µ—Å 
–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã ¬´The Kudri club¬ª
–≥–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞, –î—É—Ö–æ–≤—Å–∫–æ–π –ø–µ—Ä., –¥–æ–º 17 	
–ú–∞—Å—Ç–µ—Ä 
–ú–∞—Å—Ç–µ—Ä: –í–∞–ª–µ—Ä–∏—è –ê–Ω –ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏ / –°—Ç—Ä–∏–∂–∫–∏ / –ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞""")
        
        assert result is not None
        assert "—Å—Ç—Ä–∏–∂–∫–∞" in result["title"].lower()
        assert result["start_time"] == "2024-01-06T20:00:00"
        assert result["end_time"] == "2024-01-06T21:00:00"
        assert "–î—É—Ö–æ–≤—Å–∫–æ–π" in result["location"]
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_online_psychologist(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("""üíÅüèª –ü—Å–∏—Ö–æ–ª–æ–≥ –∑–∞–ø–∏—Å–∞–ª –≤–∞—Å –Ω–∞ —Å–µ—Å—Å–∏—é 
–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –≤–∞—à—É —Å–µ—Å—Å–∏—é –¥–æ 2025-03-16 19:00, –∏–Ω–∞—á–µ –æ–Ω–∞ –æ—Ç–º–µ–Ω–∏—Ç—Å—è. 
–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ 
–î–µ—Ç–∞–ª–∏ —Å–µ—Å—Å–∏–∏: 
‚Ä¢ 
–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: –¢–∞—Ç—å—è–Ω–∞ –ö–∞—Ç–∞–µ–≤–∞ 
‚Ä¢ 
–í–∏–¥ —Ç–µ—Ä–∞–ø–∏–∏: –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ (–æ–Ω–ª–∞–π–Ω) 
–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: 2025-03-17 19:00 (–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è) 
‚Ä¢ 
–°–µ—Å—Å–∏—è –ø—Ä–æ–π–¥–µ—Ç –ø–æ –≤–∏–¥–µ–æ—Å–≤—è–∑–∏: –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ""")
        
        assert result is not None
        assert "—Å–µ—Å—Å–∏—è" in result["title"].lower() or "–ø—Å–∏—Ö–æ–ª–æ–≥" in result["title"].lower()
        assert result["start_time"] == "2025-03-17T19:00:00"
        assert result["end_time"] == "2025-03-17T20:00:00"
        assert result["location"] == "–û–Ω–ª–∞–π–Ω"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_zloydoctor(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("""Zloydoctor
–ú–æ—Å–∫–≤–∞, –°—Ä–µ—Ç–µ–Ω—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä –¥.2
–í–ª–∞–¥–∏—Å–ª–∞–≤, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã: 18 –º–∞—Ä—Ç–∞ 2024 –≤ 21:15 
–î–µ—Ç–∞–ª–∏ –≤–∏–∑–∏—Ç–∞
–¢—É–ø–æ–ª–µ–≤ –ê–Ω–¥—Ä–µ–π
zloydocto
–ü—Ä–∏—ë–º zloydoctor 45–º new
8 000 ‚ÇΩ""")
        
        assert result is not None
        assert "–¢—É–ø–æ–ª–µ–≤" in result["title"]
        assert result["start_time"] == "2024-03-18T21:15:00"
        assert result["end_time"] == "2024-03-18T22:00:00"
        assert "–°—Ä–µ—Ç–µ–Ω—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä" in result["location"]
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_online_masterclass(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("""–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –ê–Ω—è –∏–∑ Flow!  üòÄ
–ö–∞–∫ –∏ –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å, –∑–∞–ø–∏—Å–∞–ª–∞ –Ω–∞ –æ–Ω–ª–∞–π–Ω –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞ 45" –∏–ª–∏ "–ö–∞–∫ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –ø–æ 100+ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –í2–í –±–∏–∑–Ω–µ—Å –∏ –±–∏–∑–Ω–µ—Å –≤ —Å—Ñ–µ—Ä–µ —É—Å–ª—É–≥ –µ–∂–µ–º–µ—Å—è—á–Ω–æ?"
–û–Ω –ø—Ä–æ–π–¥–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 5–≥–æ –∞–ø—Ä–µ–ª—è, –≤ 17:00 –∏ –ø—Ä–æ–¥–ª–∏—Ç—Å—è –≤—Å–µ–≥–æ 45 –º–∏–Ω—É—Ç.
üî• –°—Å—ã–ª–∫—É –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –º—ã —Å–∫–∏–Ω–µ–º –≤ –¥–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –Ω–∞—à–µ–º –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–µ https://cutt.ly/cciPpjb - –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–µ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!""")
        
        assert result is not None
        assert "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è" in result["title"].lower()
        assert result["start_time"] == "2024-04-05T17:00:00"
        assert result["end_time"] == "2024-04-05T17:45:00"
        assert result["location"] == "https://cutt.ly/cciPpjb"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_ceramic_breakfast(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("""–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ 
–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! 
–ü—Ä–∏–≥–ª–∞—à–∞—é –Ω–∞ –ö–ï–†–ê–ú–ò–ß–ï–°–ö–ò–ô –ó–ê–í–¢–†–ê–ö‚ò∫Ô∏è
–ù–∞ –≤—Å—Ç—Ä–µ—á–µ –í –≠–¢–£ –ü–Ø–¢–ù–ò–¶–£ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ–± —É—á–∞—Å—Ç–∏–∏ –≤ –º–∞—Ä–∫–µ—Ç–∞—Ö/—Ñ–µ—Å—Ç–∏–≤–∞–ª—è—Ö/–≤—ã—Å—Ç–∞–≤–∫–∞—Ö. –ë—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–æ –Ω–µ —Ç–æ–ª—å–∫–æ –∫–µ—Ä–∞–º–∏—Å—Ç–∞–º, –Ω–æ –∏ –≤—Å–µ–º —Ö–µ–Ω–¥–º–µ–π–¥-–º–∞—Å—Ç–µ—Ä–∞–º. 
–ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –≥–æ—Å—Ç—å - –ê–Ω—è –ì–æ—Ä—Ñ–∏–Ω–∫–µ–ª—å, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Ñ–µ—Å—Ç–∏–≤–∞–ª—è ¬´Ceramania¬ª‚ù§Ô∏è
–ê–Ω—è —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –º–∞—Ä–∫–µ—Ç—É, –∫–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å —Å—Ç–µ–Ω–¥, –∫–∞–∫ –≤—ã–¥–µ–ª–∏—Ç—Å—è —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∫–∞–∫–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ —É—á–∞—Å—Ç–∏—è? –ü–æ–¥–µ–ª–∏—Ç—Å—è –æ–≥—Ä–æ–º–Ω–µ–π—à–∏–º –æ–ø—ã—Ç–æ–º, —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç Ceramania –∏ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.
–û—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞, –æ–±—Å—É–¥–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –≤–∞—Å –∏ –≤–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞.
–ë—É–¥—É—Ç —É–≥–æ—â–µ–Ω–∏—è, —á–∞–π, –∫–æ—Ñ–µ, –ø–æ–ª–µ–∑–Ω—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞, –≥–æ—Ä—è—á–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏ –æ–±–º–µ–Ω –æ–ø—ã—Ç–æ–º. –í –æ–±—â–µ–º, –Ω–∞—Å—Ç–æ—è—â–∏–π –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥ —Å—Ä–µ–¥–∏ –∫–µ—Ä–∞–º–∏—Å—Ç–æ–≤. 
–ñ–¥—ë–º –≤–∞—Å –≤ –≥–æ—Å—Ç–∏ –≤ –Ω–∞—à–µ–π —á—É–¥–µ—Å–Ω–æ–π —Å—Ç—É–¥–∏–∏ —Å –≤–∏–¥–æ–º –Ω–∞ –∑–∞–ª–∏–≤üåä
–ö–æ–≥–¥–∞: 17 –º–∞—Ä—Ç–∞ (–ø—Ç)
–í—Ä–µ–º—è: 12:00
–°—Ç–æ–∏–º–æ—Å—Ç—å: 800‚ÇΩ 
–ì–¥–µ: –°–ü–±, –°–µ–≤–∫–∞–±–µ–ª—å –ø–æ—Ä—Ç, –ö–æ–∂–µ–≤–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è 34–∞
–ü–∏—à–∏—Ç–µ –≤ –ª–∏—á–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏‚ù§Ô∏è""")
                
        assert result is not None
        assert "–∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π –∑–∞–≤—Ç—Ä–∞–∫" in result["title"].lower()
        assert result["start_time"] == "2024-03-17T12:00:00"
        assert result["end_time"] == "2024-03-17T13:00:00"
        assert "–°–µ–≤–∫–∞–±–µ–ª—å" in result["location"]
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_webinar(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2023, 2, 20, 12, 0)
        result = await llm_instance.parse_calendar_event("""–î–æ–±—Ä—ã–π –¥–µ–Ω—å.
–ü—Ä–∏–≥–ª–∞—à–∞—é –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–µ–±–∏–Ω–∞—Ä –ø–æ —Ç–µ–º–µ ¬´–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û –¥–ª—è GigaDevice GD32 —Å–µ–º–µ–π—Å—Ç–≤–∞. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥.
–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –±–∞–∑–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –ü–û.¬ª
–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä: https://go.mywebinar.com/smkx-fnrj-qpbm-kfdb
–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ–±–∏–Ω–∞—Ä–∞: https://dab-embedded.com/en/services/webinar-gigadevice-gd32-software-dev-prof/?lang=en
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç—Ä–µ–Ω–∏–Ω–≥–∞ –±—ã–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–ª–∞—Ç–∞ –Ω–∞ –±–∞–∑–µ GigaDevice GD32F470 –∏ FT2232H (–≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–ª–∞–¥—á–∏–∫–∞) - —Ñ–æ—Ç–æ.
25.–§–µ–≤—Ä–∞–ª—è 2023, 15:00 –ø–æ –ú–æ—Å–∫–≤–µ
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 1 —á–∞—Å.
#–≤–µ–±–∏–Ω–∞—Ä #firmware #GD32 #opensource""")
        
        assert result is not None
        assert "GD32" in result["title"]
        assert result["start_time"] == "2023-02-25T15:00:00"
        assert result["end_time"] == "2023-02-25T16:00:00"
        assert result["location"] == "https://go.mywebinar.com/smkx-fnrj-qpbm-kfdb"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_conference(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2022, 12, 1, 12, 0)
        result = await llm_instance.parse_calendar_event("""CCCP-2022
–ò–Ω—Å—Ç–∏—Ç—É—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–∞—É–∫ –í–®–≠ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –µ–∂–µ–≥–æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
Cortex and Cognition: Connection Principles. Neuroimaging and clinical applications (CCCP-2022)
21-22 –¥–µ–∫–∞–±—Ä—è 2022 –≥–æ–¥–∞
–¢–µ–º—ã –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: 
- –∏–Ω–≤–∞–∑–∏–≤–Ω—ã–µ –∏ –Ω–µ–∏–Ω–≤–∞–∑–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ–π—Ä–æ–∫–∞—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (MEG, EEG, fMRI)
- —Å—Ç–∏–º—É–ª—è—Ü–∏—è (TMS, tDCS, tACS)
- –æ–ø—Ç–æ–≥–µ–Ω–µ—Ç–∏–∫–∞
- —Ç–µ—Ä–º–æ–≥–µ–Ω–µ—Ç–∏–∫–∞
- –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –Ω–µ–π—Ä–æ–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ 
- –∏ –¥—Ä. 
–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –ø—Ä–æ–π–¥–µ—Ç –≤ —Å–º–µ—à–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–æ—á–Ω–æ + –æ–Ω–ª–∞–π–Ω).
–Ø–∑—ã–∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ -- –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.
–ó–∞—è–≤–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ (—Å —Ç–µ–∑–∏—Å–∞–º–∏) –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –¥–æ 11.12.2022 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.""")
        
        assert result is not None
        assert result["start_time"] == "2022-12-21T10:00:00"
        assert result["end_time"] == "2022-12-22T23:59:59"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_skoltech_conference(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2021, 11, 1, 12, 0)
        result = await llm_instance.parse_calendar_event("""üì¢üì¢üì¢Skoltech Neuro –∏ CNBR_Open –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç –∫ —É—á–∞—Å—Ç–∏—é –≤ –º–∏–Ω–∏-–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ "Neuroenhancement and Neuromodulation"  
–í–µ–¥—É—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: Skoltech, Mayo Clinic (USA), –ö–§–£ (–ö–∞–∑–∞–Ω—å), –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –õ–æ–±–∞—á–µ–≤—Å–∫–æ–≥–æ (–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥), –ò–Ω–Ω–æ–ø–æ–ª–∏—Å–∞ (–ö–∞–∑–∞–Ω—å) –∏ –¥—Ä. –≤—Å—Ç—Ä–µ—Ç—è—Ç—Å—è –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å —Å–≤–µ–∂–∏–µ —Ç–µ–º—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ–π—Ä–æ–º–æ–¥—É–ª—è—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.  
üóì 24 –ù–æ—è–±—Ä—è 2021, 10:00 ‚Äî16:00  
üìç Skoltech Campus, E-R2-2019  
üí∞ –°–≤–æ–±–æ–¥–Ω—ã–π –¥–æ—Å—Ç—É–ø, –ø–æ–ª–∏—Ç–∏–∫–∞ COVID-FREE (—Ç—Ä–µ–±—É—é—Ç—Å—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–∏, –∞–Ω—Ç–∏—Ç–µ–ª–∞—Ö –∏–ª–∏ —Å–≤–µ–∂–∏–π  PCR-test )  
üó£ –Ø–∑—ã–∫ ‚Äì English, –†—É—Å—Å–∫–∏–π 
–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞): –ø–æ —Å—Å—ã–ª–∫–µ. 
–°–ø–∏—Å–æ–∫ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π —Å –∞–±—Å—Ç—Ä–∞–∫—Ç–∞–º–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–¥–µ—Å—å""")
        
        assert result is not None
        assert result["start_time"] == "2021-11-24T10:00:00"
        assert result["end_time"] == "2021-11-24T16:00:00"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_meg_webinar(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("""–ù–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è —è —Ç—É—Ç —Å–æ–≤–µ—Ç–æ–≤–∞–ª—Å—è –Ω–∞—Å—á–µ—Ç —Ç–æ–≥–æ, –∫–æ–≥–æ –±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ –Ω–æ–≤—ã–π —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –≤–µ–±–∏–Ω–∞—Ä –Ω–µ–π—Ä–æ–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ-–±—é—Ä–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é –∏—Å—Ö–æ–¥–Ω—É—é –∏–¥–µ—é –ø—Ä–∏—à–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–∑–µ–º–ª–∏—Ç—å, —Ç–µ–º –Ω–µ –º–µ–Ω–µ–µ, –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ–±–∏–Ω–∞—Ä–æ–≤ –ú–≠–ì-—Ü–µ–Ω—Ç—Ä–∞ –ú–ì–ü–ü–£ –≤ —ç—Ç–æ–º –≥–æ–¥—É –Ω–µ–ø—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–π–¥—É—Ç. –ú—ã —É–∂–µ –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º –∑–¥–µ—Å—å –Æ—Ä–∏–µ–º –ü–∞–≤–ª–æ–≤—ã–º (ManyEEGLabs), –æ–Ω –≤—ã—Å—Ç—É–ø–∏—Ç –≤ –º–∞–µ. 
–ê –ø–µ—Ä–≤—ã–π –≤–µ–±–∏–Ω–∞—Ä –±—É–¥–µ—Ç 7 –∞–ø—Ä–µ–ª—è, 18:00 –ø–æ –ú–æ—Å–∫–≤–µ. –ù–∞ –Ω–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä –ì–∞—Ä–≤–∞—Ä–¥—Å–∫–æ–≥–æ –∏ –ì–µ—Ç–µ–±–æ—Ä–≥—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤ –ù–æ—à–∏–Ω –•–∞–¥–∂–∏–∫—Ö–∞–Ω–∏ (Nouchine Hadjikhani) —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –ø—Ä–æ Eye contact in autism and its link to the imbalance of excitation and inhibition in the brain.""")
        
        assert result is not None
        assert result["start_time"] == "2024-04-07T18:00:00"
        assert result["end_time"] == "2024-04-07T19:00:00"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_audio_conference(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 4, 10, 12, 0)
        result = await llm_instance.parse_calendar_event("""–°–µ–≥–æ–¥–Ω—è, –≤ —Å—É–±–±–æ—Ç—É, 10 –∞–ø—Ä–µ–ª—è, –≤ 22:22 –ø–æ –∏—Ä–∫—É—Ç—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (–≤ —Å—Ç–æ–ª–∏—Ü–µ –±—É–¥–µ—Ç –Ω–∞ –ø—è—Ç—å —á–∞—Å–æ–≤ –º–µ–Ω—å—à–µ) –Ω–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –±—É–¥–µ—Ç –∞—É–¥–∏–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è. ¬´–ö–ª—É–±—Ö–∞—É—Å¬ª, –∫–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç –º–æ–ª–æ–¥—ë–∂—å.
–ü—Ä–∏–≥–ª–∞—à–∞—é –∂–µ–ª–∞—é—â–∏—Ö –ø–æ—Å–ª—É—à–∞—Ç—å –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –ú–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –±—É–º–∞–∂–Ω–æ–π –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–π –≥–æ—Ç–æ–≤–∏—Ç –Ω–∞—à–µ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ. –ú—ã –ø–ª–∞–Ω–∏—Ä—É–µ–º –µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —ç—Ç–æ–π –≤–µ—Å–Ω–æ–π, –Ω–æ —Å–ø–µ—Ä–≤–∞ —Ö–æ—á–µ—Ç—Å—è –ø–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –Ω–∞ –ª—é–¥—è—Ö.""")
        
        assert result is not None
        assert result["start_time"] == "2024-04-10T17:22:00"
        assert result["end_time"] == "2024-04-10T18:22:00"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_birthday(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2025, 3, 19, 12, 0)
        result = await llm_instance.parse_calendar_event("""
[–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ú—É—Ä–∏–Ω–æ–≤–∞, 19.03.2025, 13:32]:
–ú–æ–∏ –¥–æ—Ä–æ–≥–∏–µ –ª—é–±–∏–º—ã–µ –ª—é–¥–∏! 
–Ø –ø—Ä–∏–≥–ª–∞—à–∞—é –≤–∞—Å –≤—Å–µ—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –º–æ–π —é–±–∏–ª–µ–π—á–∏–∫ –≤ —Å—É–±–±–æ—Ç—É –≤–µ—á–µ—Ä–æ–º) 
–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∞ —Å—Ç–æ–ª–∏–∫ —Ç—É—Ç –≤ 18:00 –≤ —ç—Ç—É —Å—É–±–±–æ—Ç—É: https://yandex.com/maps/org/8_oz/1171896955
–í—Å–µ—Ö –≤–∞—Å –∂–¥—É ‚ù§""")
        
        assert result is not None
        assert result["start_time"] == "2025-03-22T18:00:00"
        assert result["end_time"] == "2025-03-22T19:00:00"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_travel(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("""‚ö° –ú–æ–ª–Ω–∏—è!
–†–æ—Å—Å–∏—è 17 –º–∞—è –æ—Ç–∫—Ä—ã–ª–∞ —Å—É—Ö–æ–ø—É—Ç–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É —Å –ì—Ä—É–∑–∏–µ–π. –ê —ç—Ç–æ –∑–Ω–∞—á–∏—Ç...
Rock'n'road –µ–¥–µ—Ç –≤ –ì—Ä—É–∑–∏—é!
–î—Ä—É–∑—å—è, –º—ã –∂–¥–∞–ª–∏ —ç—Ç–æ–≥–æ 2 –≥–æ–¥–∞! –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –≤ –∞–≤—Ç–æ–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ —Å—Ç—Ä–∞–Ω—É –≥–æ—Ä –∏ –≤–∏–Ω–∞ ‚õ∞üç∑
–ú—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–µ–∑–¥–∫—É:
20‚Äì28 –∞–≤–≥—É—Å—Ç–∞ (9 –¥–Ω–µ–π, —Å —Å—É–±–±–æ—Ç—ã –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏) —Å–æ —Å—Ç–∞—Ä—Ç–æ–º –∏–∑ –ú–∏–Ω –í–æ–¥. 
–ü–æ—Å–µ—Ç–∏–º —Å–∞–º—ã–µ —è—Ä–∫–∏–µ –∏ –∑–Ω–∞–∫–æ–≤—ã–µ –º–µ—Å—Ç–∞ –ì—Ä—É–∑–∏–∏: –°—Ç–µ–ø–∞–Ω—Ü–º–∏–Ω–¥–∞, –¢–±–∏–ª–∏—Å–∏, –ú—Ü—Ö–µ—Ç–∞, –ë–æ—Ä–∂–æ–º–∏, –ú–µ—Å—Ç–∏–∞.
ü§ü –ù–∞ –ø–µ—Ä–≤—É—é –ø–æ–µ–∑–¥–∫—É-—Ä–∞–∑–≤–µ–¥–∫—É 20‚Äì28 –∞–≤–≥—É—Å—Ç–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Å–≤–æ–∏—Ö: 59 900.
–°–µ–Ω—Ç—è–±—Ä—å—Å–∫–∞—è –ø–æ–µ–∑–¥–∫–∞ ‚Äî 65 900 üí∞
–ó–∞–≤—Ç—Ä–∞ –º—ã –∞–Ω–æ–Ω—Å–∏—Ä—É–µ–º —ç—Ç–∏ –ø–æ–µ–∑–¥–∫–∏ –≤ –∫–∞–Ω–∞–ª–µ, —Ç–∞–∫ —á—Ç–æ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å üòâ
–ü–∏—Å–∞—Ç—å, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ –≤ –ª–∏—á–∫—É  @rock_n_road
–î–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–∏ –ª—é–±–æ–π –¥–≤—É—Ö–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–æ–π –≤–∞–∫—Ü–∏–Ω–æ–π –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ü–¶–†-—Ç–µ—Å—Ç–∞, —Å–¥–µ–ª–∞–Ω–Ω–æ–≥–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 72 —á–∞—Å–æ–≤ –¥–æ –≤—ä–µ–∑–¥–∞.""")
        
        assert result is not None
        assert result["start_time"] == "2024-08-20T00:00:00"
        assert result["end_time"] == "2024-08-28T23:59:59"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_poly_date_club(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("""–•–æ—á—É –æ–±—ä—è–≤–∏—Ç—å –µ—â—ë –æ–± –æ–¥–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ ‚Äî –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –∑–∞–π–¥—ë—Ç –∏ –±—É–¥–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º, –Ω–æ –∫—Ç–æ –∑–Ω–∞–µ—Ç ‚Äî –ø–æ—ç—Ç–æ–º—É –ª—É—á—à–µ –ª–æ–≤–∏—Ç–µ –º–æ–º–µ–Ω—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–µ–π—á–∞—Å! –≠—Ç–æ –ø–µ—Ä–≤–æ–µ –±–æ–ª—å—à–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç –º–µ–Ω—è –∏ —É –º–µ–Ω—è –¥–æ–º–∞, —è –æ—á–µ–Ω—å –≤–æ–ª–Ω—É—é—Å—å –∏ –æ—á–µ–Ω—å-–æ—á–µ–Ω—å –∂–¥—É –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ‚òÄÔ∏è
26 –º–∞—è (–≤ —ç—Ç–æ—Ç —á–µ—Ç–≤–µ—Ä–≥) —Å–æ—Å—Ç–æ–∏—Ç—Å—è Poly Date Club ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π –¥–æ–±—Ä–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è! 
–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤—Å–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —á–∞—Å—Ç—å—é —Å–µ–∫—Å-–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–º—å—é–Ω–∏—Ç–∏, –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –ø–æ —Ç–µ–º–µ, –∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å—Ä–µ–¥–∏ like-minded people. 
–ú—ã –∑–∞ –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –Ω–∞ –≤–µ—Ä–±–∞–ª—å–Ω–æ–º –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ, –ø—Ä–∏–Ω—è—Ç–∏–µ. 
–í–∞–∂–Ω–æ: —ç—Ç–æ –Ω–µ –∫–∏–Ω–∫-–ø–∞—Ç–∏ –∏ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–µ–∫—Å–æ–º –Ω–∞ —ç—Ç–æ–π –≤—Å—Ç—Ä–µ—á–µ –Ω–µ–ª—å–∑—è. 
–ú–æ–∂–Ω–æ –ª–∞–π—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è - –æ–±—ä—è—Ç–∏—è, —Ç–∞–∫—Ç–∏–ª—å–Ω–æ—Å—Ç–∏. 
–ú—ã —Å–æ–∑–¥–∞—ë–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–∏–∞–º–æ—Ä–æ–≤, —Ç–µ–º–∞—Ç–∏–∫–æ–≤ –∏ –≤—Å–µ—Ö –∂–µ–ª–∞—é—â–∏—Ö —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –º–µ—Å—Ç–Ω–æ–≥–æ —Å–µ–∫—Å-–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–º—å—é–Ω–∏—Ç–∏. 
–ù–∞—à–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã: 
LGBTQ+ friendly
Poly friendly 
¬´–î–∞ - –∑–Ω–∞—á–∏—Ç –¥–∞, –Ω–µ—Ç - –∑–Ω–∞—á–∏—Ç –Ω–µ—Ç¬ª""")
        
        assert result is not None
        assert "Poly Date Club" in result["title"]
        assert result["start_time"].startswith("2024-05-26T")
        assert result["end_time"].startswith("2024-05-26T")
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_night_party(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("""‚ö†Ô∏èWarning ‚ö†Ô∏è 
–ê–Ω–æ–Ω—Å–∏—Ä—É—é —Ç—É—Å—É —É –º–µ–Ω—è –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ –≤ –°–ø–± 
–ü–æ—ç—Ç–æ–º—É –ø—Ä–∏–≥–ª–∞—à–∞—é –≤—Å–µ—Ö –∫ —Å–µ–±–µ 27-–≥–æ –∞–≤–≥—É—Å—Ç–∞ –≤ 20:00 –¥–æ 05:00 28-–≥–æ –∞–≤–≥—É—Å—Ç–∞ –Ω–∞ —Ç—É—Å–æ–≤–æ—á—É.
–ë—É–¥–µ—Ç –º–Ω–æ–≥–æ –≤–∫—É—Å–Ω–æ–π –µ–¥—ã, –∞–ª–∫–æ–≥–æ–ª—å(—Å–∏–¥—Ä—ã, –∫–æ–∫—Ç–µ–π–ª–∏ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∫—Ä–µ–ø—á–µ ‚Äî –Ω–µ—Å–∏—Ç–µ —Å–∞–º–∏). 
–ü–æ–±–æ–ª—Ç–∞–µ–º, —Ä–∞—Å—Å–∫–∞–∂–µ–º –∫—É–ª–ª—Å—Ç–æ—Ä–∏ –¥—Ä—É–≥ –¥—Ä—É–≥—É, –±—É–¥–µ—Ç –≤–µ—Å–µ–ª–æ üéä
–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å +1, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –æ–± —ç—Ç–æ–º –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏ —Ç—É–¥–∞ –∂–µ –∑–∞ –∞–¥—Ä–µ—Å–æ–º, –∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç –∫—É–¥–∞ –µ—Ö–∞—Ç—å
–° –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –±—É–¥—É –∂–¥–∞—Ç—å –∫–∞–∂–¥–æ–≥–æ""")
        
        assert result is not None
        assert result["start_time"] == "2024-08-27T20:00:00"
        assert result["end_time"] == "2024-08-28T05:00:00"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_outdoor_concert(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2023, 7, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("""üìÖ –ö–æ–≥–¥–∞: 31 –∏—é–ª—è 2023, 20:00
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –º—É–∑—ã–∫–∏ –∏ –≤–æ–ª—à–µ–±—Å—Ç–≤–∞!
–ú—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –Ω–∞ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–π –∫–æ–Ω—Ü–µ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–π–¥–µ—Ç –Ω–∞ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ –ø–æ–¥ –æ—Ç–∫—Ä—ã—Ç—ã–º –Ω–µ–±–æ–º . –≠—Ç–æ –±—É–¥–µ—Ç –≤–µ—á–µ—Ä, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –º—É–∑—ã–∫–æ–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–µ–±–µ, –∫–∞–∫ –∑–≤—É–∫–∏ –º—É–∑—ã–∫–∏ —Å–æ—á–µ—Ç–∞—é—Ç—Å—è —Å –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–µ–º –ª–µ—Ç–Ω–µ–≥–æ –±—Ä–∏–∑–∞, —Å–æ–∑–¥–∞–≤–∞—è –º–∞–≥–∏—é —ç–º–æ—Ü–∏–π –∏ –ø–µ—Ä–µ–Ω–æ—Å—è –Ω–∞—Å –≤ –¥—Ä—É–≥–æ–π –º–∏—Ä.
–ù–∞—à –±–æ–ª—å—à–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤ —Å—ã–≥—Ä–∞–µ—Ç –¥–ª—è –≤–∞—Å –ø—Ä–æ–≥—Ä–∞–º–º—É Miyazaki Dreams, –∏ –∫–∞–∂–¥–∞—è –Ω–æ—Ç–∞ –ø—Ä–æ–Ω–∏–∫–Ω–µ—Ç –≤ –≤–∞—à—É –¥—É—à—É.
üö© –ê–¥—Ä–µ—Å: –ï—Ä–µ–≤–∞–Ω, —É–ª. –ê—Ä–∞–º–∏, 42
üí∞–¶–µ–Ω–∞: 5000 ÷è""")
        
        assert result is not None
        assert "–ö–æ–Ω—Ü–µ—Ä—Ç" in result["title"]
        assert result["start_time"] == "2023-07-31T20:00:00"
        assert "Miyazaki Dreams" in result["description"]
        assert result["location"] == "–ï—Ä–µ–≤–∞–Ω, —É–ª. –ê—Ä–∞–º–∏, 42"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_pcb_webinar(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 10, 1, 12, 0)
        result = await llm_instance.parse_calendar_event("""üéì –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª –Ω–∞—à–∏—Ö –≤–µ–±–∏–Ω–∞—Ä–æ–≤ –ø–æ –ø–µ—á–∞—Ç–Ω—ã–º –ø–ª–∞—Ç–∞–º.
üìå –ñ–¥—ë–º –≤–∞—Å 17 –æ–∫—Ç—è–±—Ä—è –≤ 11:00!
–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –¥–≤–∞ –≤–æ–ø—Ä–æ—Å–∞:
üí¨ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –ì–†–ê–ù –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è.
–ø—Ä–æ–≤–µ–¥–µ–º –æ–±–∑–æ—Ä —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–∞–º–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—á–∞—Ç–Ω—ã—Ö –ø–ª–∞—Ç;
—Ä–∞—Å—Å–∫–∞–∂–µ–º –æ —Ç–æ–º, –∫–∞–∫ —á–∏—Ç–∞—Ç—å –∏ –ø–æ–Ω–∏–º–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è ‚Äî –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤–º–µ—Å—Ç–µ —Å –∫–∞–∂–¥–æ–π –ø–æ—Å—Ç–∞–≤–∫–æ–π –ø–µ—á–∞—Ç–Ω—ã—Ö –ø–ª–∞—Ç.""")
        
        assert result is not None
        assert result["start_time"] == "2024-10-17T11:00:00"
        assert result["end_time"] == "2024-10-17T12:00:00"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_japan_day(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 11, 1, 12, 0)
        result = await llm_instance.parse_calendar_event("""11.11 11:00‚Äì15:00 –î–µ–Ω—å –Ø–ø–æ–Ω–∏–∏ –≤ LAN
–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –Ω–∞ —Ç–≤–æ—Ä—á–µ—Å–∫—É—é –≤—Å—Ç—Ä–µ—á—É, –≥–¥–µ –≤–∞—Å –∂–¥–µ—Ç –ª–µ–∫—Ü–∏—è –æ —Ü–≤–µ—Ç–æ–≤–æ–º —Å–∏–º–≤–æ–ª–∏–∑–º–µ –≤ –Ø–ø–æ–Ω–∏–∏ –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ—Ä–∫—à–æ–ø, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ–º —Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω—ã —Å —è–ø–æ–Ω—Å–∫–æ–π –ø–∞–ª–∏—Ç—Ä–æ–π —Ü–≤–µ—Ç–æ–≤.
–í—Å—Ç—Ä–µ—á–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π: –ª–µ–∫—Ü–∏—è –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ—Ä–∫—à–æ–ø.
–ù–∞ –ª–µ–∫—Ü–∏–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ü–≤–µ—Ç–æ–≤–æ–π —Å–∏–º–≤–æ–ª–∏–∑–º –≤ –Ø–ø–æ–Ω–∏–∏, –≤–∫–ª—é—á–∞—è:
- —Ü–≤–µ—Ç–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ª–∏—Å–æ–π, –±–∞–º–±—É–∫–æ–º –∏ –≤–∞—Å–∞–±–∏
- –ø—Ä–∏—á–∏–Ω–∞ —è—Ä–∫–∏—Ö –∏ —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã—Ö –≤–æ–ª–æ—Å —É –≥–µ—Ä–æ–µ–≤ –∞–Ω–∏–º–µ
- –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ –Ω–∞—Ä—è–¥–æ–≤ —è–ø–æ–Ω—Å–∫–∏—Ö –±–ª–∞–≥–æ—Ä–æ–¥–Ω—ã—Ö –æ—Å–æ–± –∏ —Ü–≤–µ—Ç –æ–¥–µ–∂–¥—ã –Ω–∞ –∏–º–ø–µ—Ä–∞—Ç–æ—Ä–µ –Ø–ø–æ–Ω–∏–∏.
–ù–∞ –≤–æ—Ä–∫—à–æ–ø–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—É—é —è–ø–æ–Ω—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É —Ü–≤–µ—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–¥–∏–º –∫–∞—Ä—Ç–∏–Ω—É –≤ —è–ø–æ–Ω—Å–∫–æ–º —Å—Ç–∏–ª–µ —Å –ø–æ–º–æ—â—å—é —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã. –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–∞–∂–µ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö.
–í—Å—Ç—Ä–µ—á—É –ø—Ä–æ–≤–æ–¥—è—Ç:
–í–∞–ª–µ—Ä–∏—è –ü—Ä–æ–∫–∞–µ–≤–∞ ‚Äî –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —è–ø–æ–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, –∞–≤—Ç–æ—Ä –ª–µ–∫—Ü–∏–π –æ —è–∑—ã–∫–µ –∏ –∫—É–ª—å—Ç—É—Ä–µ –Ø–ø–æ–Ω–∏–∏ –∏ –ê–ª—ë–Ω–∞ –ö—Ä–∞—Å–∏–ª—å–Ω–∏–∫–æ–≤–∞ ‚Äî —Ö—É–¥–æ–∂–Ω–∏—Ü–∞, –ø–µ–¥–∞–≥–æ–≥, –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–∏—Ü–∞ —à–∫–æ–ª—ã Go art.
–ì—Ä—É–ø–ø–∞ –Ω–µ–±–æ–ª—å—à–∞—è –∏ –ª–∞–º–ø–æ–≤–∞—è, —É—Å–ø–µ–π—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ.
–¶–µ–Ω–∞: 12 000 AMD —Å —á–µ–ª–æ–≤–µ–∫–∞, 22 000 AMD —Å –¥–≤–æ–∏—Ö (–Ω—É–∂–Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
50% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞, –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–ø–ª–∞—Ç—ã
–ú–µ—Å—Ç–æ: –∫–∞—Ñ–µ ¬´LAN¬ª (—É–ª. –¢—É–º–∞–Ω—è–Ω–∞, 35–ì)""")
        
        assert result is not None
        assert result["start_time"] == "2024-11-11T11:00:00"
        assert result["end_time"] == "2024-11-11T15:00:00"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_job_interview(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("""Olga,
–í–ª–∞–¥–∏—Å–ª–∞–≤, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å. –ü—Ä–æ—â—É –ø—Ä–æ—â–µ–Ω–∏—è. –ø—Ä–∏–±–æ–µ–ª–µ–ª–∞ –∏ –Ω–∞ –ø–∞—Ä—É –¥–Ω–µ–π –≤—ã–≤–∞–ª–∏–ª–∞—Å—å –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞.
–µ—Å–ª–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å –≤–æ—Ç —Ç–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –ö—Ä–∞—Ç–∫–æ –æ –≤–∞–∫–∞–Ω—Å–∏–∏. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª - –æ—Ç–≤–µ—á–∞—Ç—å –∑–∞ —Ä–∞–∑–∑—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–µ–≤–∞–π—Å–æ–≤ –ú—Ç—Å. –û—Ç —É–º–Ω—ã—Ö –æ—à–µ–π–Ω–∏–∫–æ–≤, –¥–æ –∫–æ–ª–æ–Ω–æ–∫. –ú—Ç—Å —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω–∏—é –∏ –¥–∏—Å—Ç—Ä–∏–±—É—Ü–∏–∏ —É–º–Ω—ã—Ö –¥–µ–≤–∞–π—Å–æ–≤. –ò –Ω–∞–º –Ω—É–∂–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è. 
–ü–æ –º–∏–º–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∑–∞–π–Ω–∞, –∑–∞–∫–∞–∑ –ø–∞—Ä—Ç–∏–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –µ–µ –≤–≤–æ–∑ –∏ –¥–∏—Å—Ç—Ä–∏–±—É—Ü–∏—è –≤ –†–§.
–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã –≤–µ–¥–µ —Ç–∞–∫–æ–π —Å–æ–≤—Å–µ–º –∑–∞–∫—Ä—ã—Ç—ã–π –ø–æ–∏—Å–∫, –ø–æ—ç—Ç–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –∏–º–µ—é. —ç
Olga, 
–ö–æ–ª–ª–µ–≥–∏ –∏–∑ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –æ—á–µ–Ω—å —Ö–æ—Ç—è—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤–∞—Å –Ω–∞ –∑—É–º )
vvzvlad,
–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ó–≤—É—á–∏—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ
–î–∞–≤–∞–π—Ç–µ, —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–æ–±—â–∞—é—Å—å.
Olga,
–°—É–ø–µ—Ä! –£ –≤–∞—Å –∫–∞–∫–∏–µ –µ—Å—Ç—å —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ?
–Ø —Å–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä—é —Å–ª–æ—Ç—ã —É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∏ –æ—Ç–ø–∏—à—É –≤–∞–º
 –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 18 —á–∏—Å–ª–ª–æ, 16;00 —á–∞—Å–æ–≤""")
        
        assert result is not None
        assert result["start_time"] == "2024-03-18T16:00:00"
        assert result["end_time"] == "2024-03-18T17:00:00"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_gokon(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2023, 12, 24, 10, 0)
        result = await llm_instance.parse_calendar_event("""–í–ª–∞–¥, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å! –≠—Ç–æ —Å–≤–∏–¥–∞–Ω–∏—è GOKON! –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –¥–µ–≤—É—à–µ–∫ –≤–æ–∑—Ä–∞—Å—Ç–∞ 30-34) –∫—Ä–∞—Å–∏–≤—ã–µ,–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ, —É –≤–∞—Å –µ—Å—Ç—å –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã! 19:00, –º.–ö—É—Ä—Å–∫–∞—è . –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–º–æ–≥–ª–∏ –±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è?)
–ú—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Ç–µ–±—è –Ω–∞ –≤–µ—á–µ—Ä Gokon. –ì—Ä—É–ø–ø–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞üíô 
–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ–µ —É—á–∞—Å—Ç–∏–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –≤–∑–Ω–æ—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 2-—Ö —á–∞—Å–æ–≤ –≤ 100% –æ–±—ä–µ–º–µ. –°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è 3600 —Ä—É–±–ª–µ–π.
–ú–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É –°–±–µ—Ä–±–∞–Ω–∫. –ü–æ–ª—É—á–∞—Ç–µ–ª—å –î–º–∏—Ç—Ä–∏–π –°–µ—Ä–≥–µ–µ–≤–∏—á –©. –ï—Å–ª–∏ —É —Ç–µ–±—è –∫–æ–º–∏—Å—Å–∏—è, –∑–∞–ø—Ä–æ—Å–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–∞—Å—Å—É.
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ–∫.""")
        
        assert result is not None   
        assert result["start_time"] == "2023-12-24T19:00:00"
        assert "–ö—É—Ä—Å–∫–∞—è" in result["location"]
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_hamovniki(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 11, 1, 12, 0)
        result = await llm_instance.parse_calendar_event("""09.11 –°—É–±–±–æ—Ç–∞ –≤ 16:50
–ì—É–ª—è–µ–º –ø–æ –•–∞–º–æ–≤–Ω–∏–∫–∞–º! –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–µ—â–µ–Ω–∏–µ –∞—Ä—Ç-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ "–°–æ–ª–æ–¥–æ–≤–Ω—è". 
–ì–ª—è–Ω–µ–º:
‚≠êÔ∏è –ö–∞–∫ –ø–æ—è–≤–∏–ª–∞—Å—å —Ñ–∞–±—Ä–∏–∫–∞ –ö—Ä–∞—Å–Ω–∞—è –†–æ–∑–∞? 
üéª –ü–æ—á–µ–º—É –õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π –∫—É–ø–∏–ª –∑–¥–µ—Å—å —É—Å–∞–¥—å–±—É? –ö–∞–∫–æ–≤–∞ —Ä–æ–ª—å —Ñ–∞–±—Ä–∏–∫–∏ –≤ –µ–≥–æ –∂–∏–∑–Ω–∏?
üë©‚Äçü¶Ω–ß–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω —Å–µ–∫—Ä–µ—Ç–∞—Ä—å –¢–æ–ª—Å—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω –ë—É–ª–≥–∞–∫–æ–≤? 
üß∂ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–ª "–∫–æ–º–∏—Ç–µ—Ç –ø–æ –ø—Ä–∏–∑—Ä–µ–Ω–∏—é –Ω–∏—â–∏—Ö"? –ß–µ–≥–æ –∫–æ–º–∏—Ç–µ—Ç –¥–æ–±–∏–ª—Å—è?""")
        
        assert result is not None
        assert result["start_time"] == "2024-11-09T16:50:00"
        assert result["end_time"] == "2024-11-09T17:50:00"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_hpmor(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 1, 12, 0)
        result = await llm_instance.parse_calendar_event("""üí• –ü—Ä–∞–∑–¥–Ω—É–µ–º –¥–µ—Å—è—Ç–∏–ª–µ—Ç–∏–µ ¬´–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞ –∏ –º–µ—Ç–æ–¥–æ–≤ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è¬ª –≤ –ú–æ—Å–∫–≤–µ üí•
üìÖ –î–∞—Ç–∞: —Å—É–±–±–æ—Ç–∞, 16 –º–∞—Ä—Ç–∞
‚è∞ –í—Ä–µ–º—è: 16:00
üìç –ú–µ—Å—Ç–æ: –≥. –ú–æ—Å–∫–≤–∞, –∞–¥—Ä–µ—Å –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: —É—á–∞—Å—Ç–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ
–ü–æ—á—Ç–∏ –¥–µ—Å—è—Ç—å –ª–µ—Ç –Ω–∞–∑–∞–¥, 14 –º–∞—Ä—Ç–∞ 2015 –≥–æ–¥–∞, –Æ–¥–∫–æ–≤—Å–∫–∏–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–ª–∞–≤—É ¬´–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞ –∏ –º–µ—Ç–æ–¥–æ–≤ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è¬ª. –¢–æ–≥–¥–∞ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É –ª—é–¥–∏ —Å–æ–±—Ä–∞–ª–∏—Å—å, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–Ω–∏–≥–∏.""")
        
        assert result is not None
        assert result["start_time"] == "2024-03-16T16:00:00"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_birthday_invite(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("""–°–ø–µ—à—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —É –º–µ–Ω—è 17-–≥–æ –¥–µ–∫–∞–±—Ä—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∏ —è —Ö–æ—Ç–µ–ª–∞ –±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Ç–µ–±—è –≤ –≥–æ—Å—Ç–∏ –Ω–∞ –µ–≥–æ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ
–ì–¥–µ: 
–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ü—Ä–æ–≤–∞ 34, –∫–≤.2
–ö–æ–≥–¥–∞:
15 –¥–µ–∫–∞–±—Ä—è –≤ 17:00
–ü–æ–¥—Å–∫–∞–∂–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∂–¥–∞—Ç—å –ª–∏ –º–Ω–µ —Ç–µ–±—è?
–ï—Å–ª–∏ –¥–∞, –∑–∞–π–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ —á–∞—Ç–∏–∫ –ø–æ –¥—Ä, —á—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –ø–æ–Ω–∏–º–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –±—É–¥–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ–≤""")
        
        assert result is not None
        assert result["start_time"] == "2024-12-15T17:00:00"
        assert result["end_time"] == "2024-12-15T18:00:00"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_mai_career_fair(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("""–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞–µ—Ç –≤—Å—Ç—Ä–µ—á—É  –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –ø–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—Å–∫–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π. 21 –∞–ø—Ä–µ–ª—è –≤ 17:00 –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ  —Å —Ü–µ–ª—å—é –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è–º–∏-—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º–∏ –≤ —Å—Ñ–µ—Ä–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏. –ú–æ–∂–Ω–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö, –≤–∑—è—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É –∏–ª–∏ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É (–ø–ª–∞—Ç–Ω—É—é –∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é) –∏–ª–∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –Ω–∞ –±–∞–∑–µ –∫–æ–º–ø–∞–Ω–∏–∏. 
–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ –æ—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É –ú–æ—Å–∫–≤–∞, –í–æ–ª–æ–∫–æ–ª–∞–º—Å–∫–æ–µ —à–æ—Å—Å–µ, –¥–æ–º 4, –∫–æ—Ä–ø—É—Å 6, –ì–ª–∞–≤–Ω—ã–π —É—á–µ–±–Ω—ã–π –∫–æ—Ä–ø—É—Å –ú–ê–ò. 
–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤—ã—Å—Ç—É–ø–∏—Ç—å –ø–µ—Ä–µ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ. 
–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –º–æ–∂–Ω–æ –¥–æ 7 –∞–ø—Ä–µ–ª—è –ø–æ –ø–æ—á—Ç–µ platforma@mai.ru –∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 (977) 551-77-41 (—Ç–≥ @ckp_mai), –ê–ª—ë–Ω–∞ –•–∞–±–∏—á–µ–≤–∞""")
        
        assert result is not None
        assert result["start_time"] == "2024-04-21T17:00:00"
        assert result["end_time"] == "2024-04-21T18:00:00"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_online_interview(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2022, 4, 6, 12, 0)
        result = await llm_instance.parse_calendar_event("""–í–ª–∞–¥, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å!
–ú–µ–Ω—è –∑–æ–≤—É—Ç –ù–∞–¥–µ–∂–¥–∞-—Ä–µ–¥–∞–∫—Ç–æ—Ä –í–µ—á–µ—Ä–Ω–µ–π –ú–æ—Å–∫–≤—ã. 
–£ –Ω–∞—Å —Å–µ–≥–æ–¥–Ω—è —Å–æ—Å—Ç–æ–∏—Ç—Å—è –ø—Ä—è–º–æ–π —ç—Ñ–∏—Ä –±—É–∫–≤–∞–ª—å–Ω–æ –Ω–∞ 20 –º–∏–Ω, –∏ —è –±—ã —Ö–æ—Ç–µ–ª–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –í–∞—Å, –∫–∞–∫ —Å–ø–∏–∫–µ—Ä–∞) –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω.
–í—Ä–µ–º—è: 17.15-17.35
–¢–µ–º–∞: –ù–æ–≤—ã–π –ø–∞–∫–µ—Ç —Å–∞–Ω–∫—Ü–∏–π –æ—Ç –ï–° –∏ –°–®–ê 
–í–æ–ø—Ä–æ—Å—ã:
- ¬´–≤–≤–µ—Å—Ç–∏ —Ç–æ—á–µ—á–Ω—ã–µ –∑–∞–ø—Ä–µ—Ç—ã –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç –≤ –†–æ—Å—Å–∏—é –Ω–∞ —Å—É–º–º—É 10 –º–ª—Ä–¥ –µ–≤—Ä–æ, –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤¬ª:  
–ü–æ –ø–æ–≤–æ–¥—É –ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤ - –Ω–∞–¥–æ —É–∂–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –µ—Å—Ç—å –æ–Ω–∏ —É –Ω–∞—Å –∏–ª–∏ –Ω–µ—Ç? –ö–∞–∫–∏–µ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç–Ω—ã–µ —Ö–æ–¥—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–º–µ—â–µ–Ω–∏—è?
–°–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,—ç—Ç–æ –í–∞—à–∞ —ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Ç–µ–º–∞?""")
        
        assert result is not None
        assert result["start_time"] == "2022-04-06T17:15:00"
        assert result["end_time"] == "2022-04-06T17:35:00"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_highload_committee(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2022, 2, 1, 12, 0)
        result = await llm_instance.parse_calendar_event("""–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∑—å—è!
–ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –ª–µ—Ç–Ω–∏–º–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è–º–∏.
24 —Ñ–µ–≤—Ä–∞–ª—è –≤ 11:00 (–ú–°–ö) —Å–æ—Å—Ç–æ–∏—Ç—Å—è –≤—Å—Ç—Ä–µ—á–∞ —Å –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–º –∫–æ–º–∏—Ç–µ—Ç–æ–º Saint HighLoad++ 2022.
–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–∞–º–∏ –ø–æ—á—Ç—É –ø—Ä–∏–¥—ë—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ ZOOM.
–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∫–æ–º–∏—Ç–µ—Ç–∞ ‚Äî –ø–æ —Å—Å—ã–ª–∫–µ. https://onticolist.us8.list-manage.com/track/click?u=719c4e65585ea6013f361815e&id=a4424600c4&e=c06b461e7a""")
        
        assert result is not None
        assert result["start_time"] == "2022-02-24T11:00:00"
        assert result["end_time"] == "2022-02-24T12:00:00"
        assert result["location"] == "https://onticolist.us8.list-manage.com/track/click?u=719c4e65585ea6013f361815e&id=a4424600c4&e=c06b461e7a"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_vk_teams_webinar(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("""–¢—Ä–µ–Ω–¥ –Ω–∞ —Å—É–ø–µ—Ä–∞–ø–ø: –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—Å—è —Ä—ã–Ω–æ–∫ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ 2024 –≥–æ–¥—É –∏ —á—Ç–æ –Ω–æ–≤–æ–≥–æ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ VK Teams
–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä, –ø–æ—Å–≤—è—â–µ–Ω–Ω—ã–π —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è–º —Ä—ã–Ω–∫–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –æ–±–∑–æ—Ä—É –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å—É–ø–µ—Ä–∞–ø–ø–∞ VK Teams. 
–ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º 15 –Ω–æ—è–±—Ä—è –≤ 17:00 . 
–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ.
–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è https://mailer.mail.ru/pub/mailer/click/21881/eyJhbGciOiJ""")
        
        assert result is not None
        assert result["start_time"] == "2024-11-15T17:00:00"
        assert result["end_time"] == "2024-11-15T18:00:00"
        assert result["location"] == "https://mailer.mail.ru/pub/mailer/click/21881/eyJhbGciOiJ"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_tax_consultation(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("""–§–∞–∫—É–ª—å—Ç–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –∏ –ø—Ä–∞–≤–∞ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≥–ª–∞–≤–Ω—ã—Ö –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–≤, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –∫–æ–º–ø–∞–Ω–∏–π, —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –±–∏–∑–Ω–µ—Å–∞, –Ω–∞–ª–æ–≥–æ–≤—ã—Ö —é—Ä–∏—Å—Ç–æ–≤, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –Ω–∞–ª–æ–≥–æ–≤–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏–ª–∏ –æ–Ω–ª–∞–π–Ω-—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ 2024-2025 –≥–æ–¥–∞—Ö.
–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ —Å —Ü–µ–ª—å—é –Ω–µ–¥–æ–ø—É—â–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è. –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞–ª–æ–≥–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
20 —Å–µ–Ω—Ç—è–±—Ä—è 2024 –≥–æ–¥–∞
–≥. –ú–æ—Å–∫–≤–∞, –¢–ì–ö ¬´–ò–∑–º–∞–π–ª–æ–≤–æ¬ª, –û—Ç–µ–ª—å ¬´–í–µ–≥–∞¬ª
–î–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —É—á–∞—Å—Ç–∏—è: –æ—á–Ω–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ –æ–Ω–ª–∞–π–Ω-—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è
–õ–µ–∫—Ç–æ—Ä: –†—è—Ö–æ–≤—Å–∫–∏–π –î–º–∏—Ç—Ä–∏–π –ò–≤–∞–Ω–æ–≤–∏—á
–î–æ–∫—Ç–æ—Ä —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ ¬´–ù–∞–ª–æ–≥–æ–≤ –∏ –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è¬ª –§–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –ø—Ä–∏ –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–µ –†–§, —Ä–µ–∫—Ç–æ—Ä –ò–Ω—Å—Ç–∏—Ç—É—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∏ –∞–Ω—Ç–∏–∫—Ä–∏–∑–∏—Å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ ¬´–ê–Ω—Ç–∏–∫—Ä–∏–∑–∏—Å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã¬ª –ò–≠–ê–£.
–£–ø—Ä–∞–≤–ª—è—é—â–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ –Ω–∞–ª–æ–≥–æ–≤–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π —Ñ–∏—Ä–º—ã –û–û–û ¬´–õ–µ–≥–∏–∫–æ–Ω-–ü—Ä–∞–≤–æ¬ª, —á–ª–µ–Ω –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–æ–≥–æ –°–æ–≤–µ—Ç–∞ –ò–Ω—Å—Ç–∏—Ç—É—Ç–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞, —á–ª–µ–Ω –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–æ–≥–æ –°–æ–≤–µ—Ç–∞ –ò–Ω—Å—Ç–∏—Ç—É—Ç–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–≤ –∏ –∞—É–¥–∏—Ç–æ—Ä–æ–≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ-—á–µ—Ä–Ω–æ–∑–µ–º–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞, –ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –∫–æ–º–∏—Ç–µ—Ç–∞ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é –ò–ü–ë –ú–†, –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –≥–ª–∞–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∂—É—Ä–Ω–∞–ª–∞ ¬´–í–µ—Å—Ç–Ω–∏–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–≤¬ª""")
        
        assert result is not None
        assert result["start_time"] == "2024-09-20T10:00:00"
        assert result["end_time"] == "2024-09-20T18:00:00"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_tax_planning_webinar(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("""–ö–∞–∫ –ª–µ–≥–∞–ª—å–Ω–æ –∏ –≤—ã–≥–æ–¥–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –∏–∑ –±–∏–∑–Ω–µ—Å–∞ ‚Äî –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –Ω–∞–ª–æ–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Å 2025 –≥–æ–¥–∞.
When
Friday, December 06, 2024
09:00 ‚Äì 17:00 MSK (8 hours)
Where
https://my.mts-link.ru/j/119945689/625598312/f76edf9a32f370a9bfac3fa09ce8988e
Who
business.tinkoff@vvzvlad.xyz, invitation@webinar.ru
Notes
–°—Ä–æ–∫–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:
06 –¥–µ–∫–∞–±—Ä—è 2024 –≥. (—Å 9:00 –¥–æ 17:00 –ø–æ –ú–æ—Å–∫–≤–µ)
–°–ø–∏–∫–µ—Ä: –ö—É–∑—å–º–∏–Ω—ã—Ö –ê—Ä—Ç–µ–º –ï–≤–≥–µ–Ω—å–µ–≤–∏—á ‚Äì —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –ø–∞—Ä—Ç–Ω—ë—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –ö—É–∑—å–º–∏–Ω—ã—Ö –∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –Ω–∞–ª–æ–≥–æ–≤–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—é —Ö–æ–ª–¥–∏–Ω–≥–æ–≤—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä, –∞—Ç—Ç–µ—Å—Ç–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç (–ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è –Ω–∞–ª–æ–≥–æ–≤—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤), –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ ¬´–í—ã—Å—à–∞—è —à–∫–æ–ª–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏¬ª (–ù–ò–£ –í–®–≠).""")
        
        assert result is not None
        assert result["start_time"] == "2024-12-06T09:00:00"
        assert result["end_time"] == "2024-12-06T17:00:00"
        assert result["location"] == "https://my.mts-link.ru/j/119945689/625598312/f76edf9a32f370a9bfac3fa09ce8988e"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_procurement_webinar(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm_instance.parse_calendar_event("""–ù–æ–≤–µ–ª–ª—ã –≤ 44-–§–ó –∏ 223-–§–ó –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏ –∫–≤–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å 2025–≥. –ù–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫.
19 –¥–µ–∫–∞–±—Ä—è
09:00 (UTC +03) 
–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ 
–°—Ä–æ–∫–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:
19‚Äì20 –¥–µ–∫–∞–±—Ä—è 2024 –≥.
(—Å 9:00 –¥–æ 17:00 –ø–æ –ú–æ—Å–∫–≤–µ)""")
        
        assert result is not None
        assert result["start_time"] == "2024-12-19T09:00:00"
        assert result["end_time"] == "2024-12-20T17:00:00"
        assert result["result"] is True
        assert result["comment"] is None

@pytest.mark.asyncio
async def test_parse_calendar_event_incomplete_phone(llm_instance):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2025, 3, 19, 12, 0)
        result = await llm_instance.parse_calendar_event("""–î–æ–±—Ä—ã–π –¥–µ–Ω—å. –ó–∞–ø–∏—Å—å –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞ —Å—É–±–±–æ—Ç—É –Ω–∞ 15:30. –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –º–æ–± –Ω–æ–º–µ—Ä, –í—ã –≤ –∑–∞–ø–∏—Å–∏ –≤–ø–∏—Å–∞–ª–∏ 892 632-73-65, –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–∏—Ñ—Ä–∞ –Ω–µ –ø—Ä–æ—à–ª–∞.""")
        
        assert result is not None
        assert result["start_time"] == "2025-03-22T15:30:00"
        assert result["end_time"] == "2025-03-22T16:30:00"
        assert result["result"] is True
        assert result["comment"] is None
