import pytest
from datetime import datetime, timedelta
from unittest.mock import patch
from src.llm import DeepSeekLLM

@pytest.fixture
def llm():
    return DeepSeekLLM()

@pytest.mark.asyncio
async def test_parse_calendar_event_today(llm):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm.parse_calendar_event("–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º —Å–µ–≥–æ–¥–Ω—è –≤ 15:00 –≤ –æ—Ñ–∏—Å–µ")
        
        assert result is not None
        assert result == {
            "title": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
            "start_time": "2024-03-15T15:00:00",
            "end_time": "2024-03-15T16:00:00",
            "description": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
            "location": "–û—Ñ–∏—Å",
            "result": True,
            "comment": None
        }

@pytest.mark.asyncio
async def test_parse_calendar_event_tomorrow(llm):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm.parse_calendar_event("–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –≤ –æ—Ñ–∏—Å–µ")
        
        assert result is not None
        assert result == {
            "title": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
            "start_time": "2024-03-16T15:00:00",
            "end_time": "2024-03-16T16:00:00",
            "description": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
            "location": "–û—Ñ–∏—Å",
            "result": True,
            "comment": None
        }

@pytest.mark.asyncio
async def test_parse_calendar_event_specific_day(llm):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm.parse_calendar_event("–í—Å—Ç—Ä–µ—á–∞ –≤ –æ—Ñ–∏—Å–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º 15 —á–∏—Å–ª–∞ –≤ 15:00")
        
        assert result is not None
        assert result == {
            "title": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
            "start_time": "2024-03-15T15:00:00",
            "end_time": "2024-03-15T16:00:00",
            "description": "–í—Å—Ç—Ä–µ—á–∞ –≤ –æ—Ñ–∏—Å–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
            "location": "–û—Ñ–∏—Å",
            "result": True,
            "comment": None
        }

@pytest.mark.asyncio
async def test_parse_calendar_event_specific_date(llm):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm.parse_calendar_event("–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º 15 –º–∞—Ä—Ç–∞ –≤ 15:00 –≤ –æ—Ñ–∏—Å–µ")
        
        assert result is not None
        assert result == {
            "title": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
            "start_time": "2024-03-15T15:00:00",
            "end_time": "2024-03-15T16:00:00",
            "description": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
            "location": "–û—Ñ–∏—Å",
            "result": True,
            "comment": None
        }

@pytest.mark.asyncio
async def test_parse_calendar_event_only_time(llm):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm.parse_calendar_event("–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ 15:00")
        
        assert result is not None
        assert result == {
            "title": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
            "start_time": "2024-03-15T15:00:00",
            "end_time": "2024-03-15T16:00:00",
            "description": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
            "location": None,
            "result": True,
            "comment": None
        }

@pytest.mark.asyncio
async def test_parse_calendar_event_past_day(llm):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 20, 12, 0)
        result = await llm.parse_calendar_event("–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º 15-–≥–æ –≤ 15:00 –≤ –æ—Ñ–∏—Å–µ")
        
        assert result is not None
        assert result == {
            "title": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
            "start_time": "2024-04-15T15:00:00",
            "end_time": "2024-04-15T16:00:00",
            "description": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
            "location": "–û—Ñ–∏—Å",
            "result": True,
            "comment": None
        }

@pytest.mark.asyncio
async def test_parse_calendar_event_past_date(llm):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 20, 12, 0)
        result = await llm.parse_calendar_event("–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º 15 –º–∞—Ä—Ç–∞ –≤ 15:00 –≤ –æ—Ñ–∏—Å–µ")
        
        assert result is not None
        assert result == {
            "title": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
            "start_time": "2025-03-15T15:00:00",
            "end_time": "2025-03-15T16:00:00",
            "description": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
            "location": "–û—Ñ–∏—Å",
            "result": True,
            "comment": None
        }

@pytest.mark.asyncio
async def test_parse_calendar_event_insufficient_info(llm):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm.parse_calendar_event("–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ —Å–µ–Ω—Ç—è–±—Ä–µ")
        
        assert result is not None
        assert result["result"] is False
        assert result["comment"] is not None
        assert "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" in result["comment"]

@pytest.mark.asyncio
async def test_parse_calendar_event_insufficient_info_with_location(llm):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm.parse_calendar_event("–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ —Å–µ–Ω—Ç—è–±—Ä–µ –≤ –æ—Ñ–∏—Å–µ")
        
        assert result is not None
        assert result["result"] is False
        assert result["comment"] is not None
        assert "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" in result["comment"]

@pytest.mark.asyncio
async def test_parse_calendar_event_doctor_appointment(llm):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm.parse_calendar_event("""–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —ç—Ç–æ –î–û–ö–ë–û–¢ ü§ñ
–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º –≤ –æ–¥–Ω—É –∏–∑ –Ω–∞—à–∏—Ö –∫–ª–∏–Ω–∏–∫ DocDeti, DocMed, DocDent –ø–æ –∞–¥—Ä–µ—Å—É: 121471, –ú–æ—Å–∫–≤–∞ –≥, –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥ –ú–æ–∂–∞–π—Å–∫–∏–π, –ü–µ—Ç—Ä–∞ –ê–ª–µ–∫—Å–µ–µ–≤–∞ —É–ª, –¥–æ–º 14, –ø–æ–º–µ—â–µ–Ω–∏–µ 23–ù –Ω–∞ 24 –ú–∞—Ä—Ç–∞ 2025 –≥. –≤ 14:20
–í—Ä–∞—á: –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥ –ß–∏–∫–∞—Ç—É–µ–≤–∞ –î

–ö–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏: https://clck.ru/34v7dh
–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –∫–ª–∏–Ω–∏–∫–∏:

 ‚Ä¢    –ù–∞ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ https://vk.com/video-165966750_456239875?list=ln-EjMdQJo7jg345uu27Q
 ‚Ä¢    –ï—Å–ª–∏ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–µ—Ö–∞—Ç—å –Ω–∞ –º–∞—à–∏–Ω–µ, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –µ—ë –º–∞—Ä–∫—É, –Ω–æ–º–µ—Ä –∏ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤—ä–µ–∑–¥ –≤ –ñ–ö. –ë–µ–∑ –Ω–µ–≥–æ –Ω–∞ –ª–∏—á–Ω–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –≤–∞—Å –Ω–µ –ø—Ä–æ–ø—É—Å—Ç—è—Ç. –û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫ –º–æ–∂–Ω–æ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É 
+7 (495) 150 99 51 –∏–ª–∏ –≤ What's App https://wa.me/79855055776""")
        
        assert result is not None
        assert result == {
            "title": "–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥",
            "start_time": "2025-03-24T14:20:00",
            "end_time": "2025-03-24T15:20:00",
            "description": "–ü—Ä–∏–µ–º —É –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∞ –ß–∏–∫–∞—Ç—É–µ–≤–æ–π –î.",
            "location": "DocDeti, DocMed, DocDent, 121471, –ú–æ—Å–∫–≤–∞ –≥, –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥ –ú–æ–∂–∞–π—Å–∫–∏–π, –ü–µ—Ç—Ä–∞ –ê–ª–µ–∫—Å–µ–µ–≤–∞ —É–ª, –¥–æ–º 14, –ø–æ–º–µ—â–µ–Ω–∏–µ 23–ù",
            "result": True,
            "comment": None
        }

@pytest.mark.asyncio
async def test_parse_calendar_event_beauty_salon(llm):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 1, 1, 12, 0)
        result = await llm.parse_calendar_event("""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í–ª–∞–¥! 
–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ ¬´The Kudri club¬ª. 

–î–∞—Ç–∞ 
06.01.2024 20:00:00 	
–ê–¥—Ä–µ—Å 
–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã ¬´The Kudri club¬ª
–≥–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞, –î—É—Ö–æ–≤—Å–∫–æ–π –ø–µ—Ä., –¥–æ–º 17 	
–ú–∞—Å—Ç–µ—Ä 
–ú–∞—Å—Ç–µ—Ä: –í–∞–ª–µ—Ä–∏—è –ê–Ω –ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏ / –°—Ç—Ä–∏–∂–∫–∏ / –ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞""")
        
        assert result is not None
        assert result == {
            "title": "–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä",
            "start_time": "2024-01-06T20:00:00",
            "end_time": "2024-01-06T21:00:00",
            "description": "–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏ / –°—Ç—Ä–∏–∂–∫–∏ / –ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞",
            "location": "–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã ¬´The Kudri club¬ª, –≥–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞, –î—É—Ö–æ–≤—Å–∫–æ–π –ø–µ—Ä., –¥–æ–º 17",
            "result": True,
            "comment": None
        }

@pytest.mark.asyncio
async def test_parse_calendar_event_online_psychologist(llm):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm.parse_calendar_event("""üíÅüèª –ü—Å–∏—Ö–æ–ª–æ–≥ –∑–∞–ø–∏—Å–∞–ª –≤–∞—Å –Ω–∞ —Å–µ—Å—Å–∏—é 
–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –≤–∞—à—É —Å–µ—Å—Å–∏—é –¥–æ 2025-03-16 19:00, –∏–Ω–∞—á–µ –æ–Ω–∞ –æ—Ç–º–µ–Ω–∏—Ç—Å—è. 
–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ 
–î–µ—Ç–∞–ª–∏ —Å–µ—Å—Å–∏–∏: 
‚Ä¢ 
–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: –¢–∞—Ç—å—è–Ω–∞ –ö–∞—Ç–∞–µ–≤–∞ 
‚Ä¢ 
–í–∏–¥ —Ç–µ—Ä–∞–ø–∏–∏: –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ (–æ–Ω–ª–∞–π–Ω) 
–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: 2025-03-17 19:00 (–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è) 
‚Ä¢ 
–°–µ—Å—Å–∏—è –ø—Ä–æ–π–¥–µ—Ç –ø–æ –≤–∏–¥–µ–æ—Å–≤—è–∑–∏: –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ""")
        
        assert result is not None
        assert result == {
            "title": "–ü—Å–∏—Ö–æ–ª–æ–≥",
            "start_time": "2025-03-17T19:00:00",
            "end_time": "2025-03-17T20:00:00",
            "description": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ (–æ–Ω–ª–∞–π–Ω)",
            "location": "–û–Ω–ª–∞–π–Ω",
            "result": True,
            "comment": None
        }

@pytest.mark.asyncio
async def test_parse_calendar_event_zloydoctor(llm):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm.parse_calendar_event("""Zloydoctor
–ú–æ—Å–∫–≤–∞, –°—Ä–µ—Ç–µ–Ω—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä –¥.2
–í–ª–∞–¥–∏—Å–ª–∞–≤, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã: 18 –º–∞—Ä—Ç–∞ 2024 –≤ 21:15 
–î–µ—Ç–∞–ª–∏ –≤–∏–∑–∏—Ç–∞
–¢—É–ø–æ–ª–µ–≤ –ê–Ω–¥—Ä–µ–π
zloydocto
–ü—Ä–∏—ë–º zloydoctor 45–º new
8 000 ‚ÇΩ""")
        
        assert result is not None
        assert result == {
            "title": "–ü—Ä–∏–µ–º —É –¢—É–ø–æ–ª–µ–≤–∞ –ê–Ω–¥—Ä–µ—è",
            "start_time": "2024-03-18T21:15:00",
            "end_time": "2024-03-18T22:00:00",
            "description": "–ü—Ä–∏—ë–º zloydoctor 45–º new",
            "location": "–ú–æ—Å–∫–≤–∞, –°—Ä–µ—Ç–µ–Ω—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä –¥.2",
            "result": True,
            "comment": None
        }

@pytest.mark.asyncio
async def test_parse_calendar_event_online_masterclass(llm):
    with patch('src.llm.datetime') as mock_datetime:
        mock_datetime.now.return_value = datetime(2024, 3, 15, 12, 0)
        result = await llm.parse_calendar_event("""–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –ê–Ω—è –∏–∑ Flow!  üòÄ
–ö–∞–∫ –∏ –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å, –∑–∞–ø–∏—Å–∞–ª–∞ –Ω–∞ –æ–Ω–ª–∞–π–Ω –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞ 45" –∏–ª–∏ "–ö–∞–∫ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –ø–æ 100+ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –í2–í –±–∏–∑–Ω–µ—Å –∏ –±–∏–∑–Ω–µ—Å –≤ —Å—Ñ–µ—Ä–µ —É—Å–ª—É–≥ –µ–∂–µ–º–µ—Å—è—á–Ω–æ?"
–û–Ω –ø—Ä–æ–π–¥–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 5–≥–æ –∞–ø—Ä–µ–ª—è, –≤ 17:00 –∏ –ø—Ä–æ–¥–ª–∏—Ç—Å—è –≤—Å–µ–≥–æ 45 –º–∏–Ω—É—Ç.""")
        
        assert result is not None
        assert result == {
            "title": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞ 45",
            "start_time": "2024-04-05T17:00:00",
            "end_time": "2024-04-05T17:45:00",
            "description": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞ 45 –∏–ª–∏ –ö–∞–∫ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –ø–æ 100+ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –í2–í –±–∏–∑–Ω–µ—Å –∏ –±–∏–∑–Ω–µ—Å –≤ —Å—Ñ–µ—Ä–µ —É—Å–ª—É–≥ –µ–∂–µ–º–µ—Å—è—á–Ω–æ?",
            "location": "–û–Ω–ª–∞–π–Ω",
            "result": True,
            "comment": None
        } 